// Efeitos Cyberpunk para o site principal
document.addEventListener('DOMContentLoaded', function() {
    // Debounce para otimização de performance
    function debounce(func, wait = 20, immediate = true) {
        let timeout;
        return function() {
            const context = this, args = arguments;
            const later = function() {
                timeout = null;
                if (!immediate) func.apply(context, args);
            };
            const callNow = immediate && !timeout;
            clearTimeout(timeout);
            timeout = setTimeout(later, wait);
            if (callNow) func.apply(context, args);
        };
    }

    // 1. Efeito de glitch nos elementos
    const glitchElements = document.querySelectorAll('.glitch');
    glitchElements.forEach(el => {
        const handleGlitch = debounce(function(e) {
            this.style.textShadow = `
                0.05em 0 0 rgba(255, 0, 170, 0.75),
                -0.025em -0.05em 0 rgba(0, 247, 255, 0.75),
                0.025em 0.05em 0 rgba(0, 255, 136, 0.75)
            `;
        }, 100);

        el.addEventListener('mouseenter', handleGlitch);
        
        el.addEventListener('mouseleave', function() {
            this.style.textShadow = 'none';
        });
    });

    // 2. Efeito de hover holográfico nos cards (otimizado)
    const holographicCards = document.querySelectorAll('.holographic-card');
    
    function handleCardMove(e) {
        const x = e.clientX - this.getBoundingClientRect().left;
        const y = e.clientY - this.getBoundingClientRect().top;
        const centerX = this.offsetWidth / 2;
        const centerY = this.offsetHeight / 2;
        const angleX = (centerY - y) / 10;
        const angleY = (x - centerX) / 10;
        
        this.style.transform = `perspective(1000px) rotateX(${angleX}deg) rotateY(${angleY}deg)`;
    }

    const debouncedCardMove = debounce(handleCardMove, 10);
    
    holographicCards.forEach(card => {
        card.addEventListener('mousemove', debouncedCardMove);
        
        card.addEventListener('mouseleave', function() {
            this.style.transform = 'perspective(1000px) rotateX(0) rotateY(0)';
        });
    });

    // 3. Efeito de digitação (com fallback)
    const typewriterElements = document.querySelectorAll('.typewriter');
    typewriterElements.forEach(el => {
        if (window.matchMedia('(prefers-reduced-motion: reduce)').matches) {
            return; // Não animar se o usuário preferir movimento reduzido
        }

        const text = el.textContent;
        el.textContent = '';
        
        let i = 0;
        const typing = setInterval(() => {
            if (i < text.length) {
                el.textContent += text.charAt(i);
                i++;
            } else {
                clearInterval(typing);
            }
        }, 100);
    });

    // 4. Animações das barras de habilidades (otimizada)
    const animateSkillBars = () => {
        const skillBars = document.querySelectorAll('.skill-level');
        skillBars.forEach(bar => {
            const level = bar.getAttribute('data-level') || bar.style.width.replace('%', '');
            bar.style.width = '0';
            
            setTimeout(() => {
                bar.style.width = `${level}%`;
            }, 500);
        });
    };

    // Executar apenas quando visível na tela
    const skillSection = document.querySelector('.cyber-skills');
    const observer = new IntersectionObserver((entries) => {
        if (entries[0].isIntersecting) {
            animateSkillBars();
            observer.unobserve(skillSection);
        }
    }, { threshold: 0.1 });

    if (skillSection) {
        observer.observe(skillSection);
    }

    // 5. Controles da janela terminal (com acessibilidade)
    const setupTerminalButtons = () => {
        // Botão vermelho - Fechar com confirmação
        document.querySelectorAll('.terminal-btn.red').forEach(btn => {
            btn.addEventListener('click', function() {
                this.style.transform = 'scale(1.2)';
                setTimeout(() => this.style.transform = 'scale(1)', 200);
                
                if (confirm('Deseja realmente fechar esta janela?')) {
                    const terminal = this.closest('.cyber-terminal');
                    if (terminal) {
                        terminal.style.transition = 'all 0.3s ease';
                        terminal.style.transform = 'scale(0.8) translateY(20px)';
                        terminal.style.opacity = '0';
                        
                        setTimeout(() => {
                            terminal.classList.add('closed');
                            terminal.style.display = 'none';
                        }, 300);
                    }
                }
            });

            // Acessibilidade - Teclado
            btn.addEventListener('keydown', (e) => {
                if (e.key === 'Enter' || e.key === ' ') {
                    btn.click();
                }
            });
        });

        // ... (outros botões do terminal)
    };

    // Inicializa todos os efeitos
    setupTerminalButtons();
});

// Fallback para quando JS estiver desabilitado
document.documentElement.classList.add('js-enabled');
